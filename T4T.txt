npx create-react-app t4t 

Find it and see what you have 
recreate it in react 


//TERMINAL

//create react project folder
npx create-react-app react-task-tracker
//move to directory 
cd react-task-tracker 

//starts running app script
npm start 




//npm setup with dependencies

npm init - create package.json


npm i react-router-dom - routes 
npm i sass - css 


Backend dependencies
npm i express - routing 
npm i cors - whitelist certain locations
npm i dotenv - use .env file on backend 
npm i axios - async GET requests 





Clean it up first
    public/ 
        index.html X
    src/ 
        App.js X
        App.css X
        index.css X
        index.js X


//from Original:   

html:
    views/ 
        /layouts/main.handlebars 
        index.handlebars
        404.handlebars
        items.handlebars
        lender.handlebars
        tool.handlebars


css: 
    public/styles.css 
js: 
    public/index.js 

    server.js - start point.
assets:
    public/images 
database: 
    mySQL with Sequelize: 
        routes/htmlRoutes.js 
        routes/apiRoutes.js 

        models/
            example.js 
            index.js 
            schema.sql 
            seeds.sql 

        config/config.js - dotenv using environment variables to connect to DB? 






USING - 
    handlebars --> React 
    Express 
    mySQL DB with Sequelize ORM 
    Protected api keys 



public/index.html 



//install react-bootstrap       in order to use CDN
npm i react-bootstrap bootstrap 



//Format 

Usage: 
Homepage -




//ISSUES: 
    CANT RUN IT
    uses handlebars so have to recreate with react 
    figure out what to do with database 



PLAN -
    grab assets of images 
    figure out css usage 
    remember how the pages are made 

    convert all static stuff html and css 


    Find tutorial of react database and utilize that instead of 
    BS MySQL database and Sequelize ORM 





//BRANCHES 
git init 

git branch -b 

1. A-1 

Home page - 

remove navbar, keep logo top left,
have about us btn, register, login, rent a tool, and lend a tool btns 
    about us takes to new page OR instead a smooth transition modal from the right  


install react boostrap 


FIRST STEP FIREBASE (could do MERN but firebase easier)
//Need register and login user so will utilize a backend server to do so.

REACT/TUTORIALS/firebase


A-2 

NOTE: 
    npm run dev 

PLAN: integrate Firebase authentication using tutorial 

1. setup firebase for dev and production 

2. setup connection for dev using:
    firebase.js
    .env.local  
    npm i firebase

3. Signup functionality 
    /contexts/AuthContext.js  - context for all authentication from firebase 
    /components/Signup.js  - components to use (decide if whole page or just child component)

    connect AuthContext to firebase config 
    setup sign up with firebase funcs 

4. Route for signup 
    <App/> signup public route 
    import <AuthProvider/> from AuthContext
    Wrap routes with AuthProvider



A-3 
    PULLING TO DIFF COMPUTER SETUP:

    .env.local for firebase config 
    make sure package.json has all dependencies and package.lock

    style signup page 
    implement auth pages: 
        signup - public DONE 
        login - public
        update profile - private
        forgot password - private

    /components/Login.js
    update AuthContext with login func
    update routes 

TEST OUT WITH TEMP EMAIL 
https://temp-mail.org/en/
//temporary emails 

signup and login 

//add links to register and login for home page 

//Sign up and Login ROUTES SET 

A-4

Logout - btn logs out user redirects to homepage
    Home.jsx -
        event handler, conect to AuthContext

    authcontext.js -
        setup firebase logout func

css- btn display none when log out successful


Logout btn created within Home.jsx 
    check if user logged in 
    if so display logout btn
    when clicked logout btn disappears and user logged out


// NEED TO TURN INTO COMPONENT LATER


A-5 
    forgot password 
        /components/ForgotPassword.js - form to reset password
        <App/> - routes for forgot password
        <AuthContext/> - firebase reset func 

form submit
    sends email to reset password 




A-6

Make private route

<App/> - private route wrapper

X <PrivateRoute/> - protects routes, 
                directs to homepage if not protected route 
                Private routes 


A-7 

Make update-profile page 
update profile - private, need btn, component, and wrapped 

components/updateProfile.js 
authcontext update with methods 
<App/> wrap updateProfile route with privateroute 


A-8 

Conditionally render for Home page 
based on logged in or not 

if currentUser doesnt exist - Public
Header:
    about us BTN - CSS kept to the right
Main: 
    signup BTN 
    login BTN 

if currentUser does exist - Private 
Header: 
    about us BTN 
    update Profile BTN 
    log out BTN 
Main:
    replace signup - Rent BTN 
    replace login - Lend BTN 

A-9

styling of btns 

Rent page and Lend Pages 
jsx and scss, routes

Lend page 

html and css form created 

A10 implement firestore database

restructure files
    firebase/
        firebase.js - config.js file 

fixing issue: when signup it takes user directly to home page that renders the private stuff
    instead of displaying only when logged in 

SOLVED: 
    created globalContext with a logged in Check state 
    passed this login check state to 
        <Home/> and <Login/>
    wrappe <App/> with provider of globalContext
    conditionally check <Home/> for currentUser AND login check state 
    NOW signup redirects to Home page that DOES NOT have the private functionality 
    and waits for user to Login to check log in.


A11 
Figure out firebase CRUD operations 


config.js - update for database - firestore and storage 

Create context for DB firebase methods 

DBContext.js - 

IN firebase - 

build tab/ Firestore Database 
create database  
    production Mode - read and write rules 
    united states - enable database location
start a collection btn
    collection - tools 
        document - create example document item
            auto generate ID 
            add fields - 
                name, duration, price 

Read the document:
IN config.js - setup firestore
    import firestore 
    export db 

IN DBContext.js - 
    methods to provide to other components
    state - list of tools from DB 
    useEffect - read the db on load 

    methods - 
        getDocs - get entire arr of docs 
            getDocs(db, "collectionRef")
        getDoc - get one doc 
        collection - specify collection reference
        onSnapShot - snapshot when db updates, used in useeffect

IN App 
    wrap with DB provider 

IN Lend.jsx 
    import DB methods and toolsList 
    create btn to call async getToolsList 

IN Firebase 
    Have to set Rules in order to get permissions 
    Firestore Database tab 
        Rules tab 
            allow read and write to true 
    By default read and write rules are false 
        meaning no one is allowed to read/write 
        set to true means everyone is allowed 

NOW able to read the toolsList from the button on Lend page

A12 

fixed to console.log that toolsList state from DBContext 

fixed console.log and useEffect to include the ID with the collection document

A13
Component to display the toolsList from DBContext 
    ToolList.jsx 
        import toolsList from DBContext 
        map through toolsList and display each tool 
        display name, duration, price
Read the toolsList from the DB and display on Lend page 
    map through toolsList and display each tool 
    display name, duration, price

ToolList component 
    import toolsList DB context
    map through toolsList and display each tool

Rent.jsx page 
    import toolList component 
    display toolList component

DBContext
    edited useEffect to update toolsList state func outside of it
    to prevent infinite loop of grabbing DB from firebase 



ISSUE: IN DBContext useEffect with onSnapshot is infinitely pulling the reading of tools 
Causing the rate limit to max out within minutes. 
SOLUTION: Comment out and dont use onSnapshot with DBContext's useEffect 
Setup so it will execute instead when we load the Rent page and hopefully doesn't keep pulling from DB infinitely 

https://www.youtube.com/watch?v=YmpWOTT2qdw 
for solution on how to fix this 

SOLUTION: in useEffect keep [] as empty dependeny arr 
so that only runs when page loads 

A14 

signup function redirects to login page 

Added username to signup, updateUser with username in AuthContext 
NOW can grab signed in user's userName from currentUser.displayName


Navbar

T4T img, About Us link, Update Profile Link, Log Out Btn 
replace log out btn with dropdown 

Created <Navigation/> to replace the navbar 
Css applied, 
    still need: 
        links, 
        logout btn functionality,
        private/public rendering navbar 
         
Navbar's title 
    NavbarDropdown has a "title" prop that displays the content inside 

Change the title prop using a component <NavTitle/>
    <NavTitle/> will have the name/email of the user displayed 
    Design IDEAS: 
        circle with initials (like google)
        Profile then a hamburger menu 
    FOR NOW: 
        display user's name only 
        Media query edit the hamburger menu 

PROBLEM: Media query hamburger opens NavDropdown then opens the menu 
    Need to have hamburger only open the menu 

Solution: Removed hamburger and just using dropdown 
 remove toggle navbarScroll BS functionality 
 set collapse always to show and removed .navbar-collapse default css 

Setup rent and lend page links 

Rent and Lend page:
    Use same navbar + css 
        REMEMBER: 
            "/" home's css will apply to other pages
            since "/rent" also starts with "/" 
    Make private routes 
    
A15 
TODO: 
    Lend page 
        Lend tool form - have the tool connected to the authorized user 
        Have img submission 
    Rent Page 
        setup html css for each tool 
        Tool name 
        Tool description
        rent duration - rental period weekly 
        price per duration - payment each week 
        tool img 
        tool's owner - auth user thats lending
        rent btn

<Rent/> -> <ToolList/> -> <ToolItem/> 

images submission in <Lend/> form 

Image upload 
https://www.youtube.com/watch?v=YOAeBSCkArA 


Firebase -
firestore: stores the reference to the files 
storage: stores the files  

setup storage 
setup config file 


Storage Context 
to use storage methods in other components

DONE LATER 

Lend page - 
    image upload to storage - 
        make reference to it with storage method 
        ref will have the image name + a random string to make each image unique
    install UUID 
        npm i uuid
        import uuidv4 from uuid
        uuidv4() - generates a random string
    upload image to storage
        uploadBytes method 
        sends promise so .then() a success alert
NOW Image uploaded to firebase storage 

Accessing imgs from storage to place on webpage 

IN firebase 
    storage img/
        each img has a public url to access it 

Lend page submits the image 
Rent page renders the image 


Grabbing the images to display on rent page -

setup listAll firebase storage method 
returns all images in the storage images/ 
on page load 

IN StorageContext - 
    2 references - 
        ref for unique image submitted 
        ref for all images in /images to grab 

listAll - returns the images/ in storage 
then loop through the list 
grab the img url from each and set the state 

In <ToolList/> - 
    grab the state and render it out on to page 

NOW displaying images on <ToolList/>


A16 Have image urls connect to the Correct tools 

PROBLEM: 
state of toolsList and state of imagesList 
Need to connect correct image to the correct tool 
Needs an association between them on tool submission

SOLUTION: 
during lend tool onSubmit 
DBContext - addTool need to set value of image property to the image url 
set toolsList state of toolImg

How this works - 
submit toolImg state - file of image 
uploadImage()
    sends file to firebase storage
    then grabs the images url from storage 
    sets the state of uploadedImageUrl 
addTool() 
    grabs the now updated uploadedImageUrl from storage 
    and submits the tool img url to the DB 


ISSUE: 
    need to find correct url for image


HAVE: toolImg =  https://firebasestorage.googleapis.com/v0/b/t4t-dev-dfe40.appspot.com/o/images%2Fphoto-screwdriver.webpd37d1f44-ca86-4004-a9e4-95c58bf57027?alt=media&token=2bb05a38-1530-4346-930d-5e281a7ba650
to 
NEED: toolImg = https://firebasestorage.googleapis.com/v0/b/t4t-dev-dfe40.appspot.com/o/images%2Fphoto-screwdriver.webpfc45f4bb-6cbf-4768-a54e-50e56fe3b62a?alt=media&token=7cb3a90b-f8eb-4d8f-84c4-e25c8851cf64 

is a token issue and need to use listAll or a equivalent method to grab 


A17a

Storage upload of image X 
uploadedImageUrl is null.  PROBLEM

In storage context - chain after the upload completes


COMPLETE - 
    upload image to storage 
    grab image url from storage 
    submit image url to DB 
    grab image url from DB 
    display image on rent page

A18 

